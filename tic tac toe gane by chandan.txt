<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        :root {
            --primary-color: #4285f4;
            --secondary-color: #ea4335;
            --bg-color: #f5f5f5;
            --text-color: #333;
            --board-color: #fff;
            --cell-border: #ddd;
        }

        .dark-theme {
            --primary-color: #8ab4f8;
            --secondary-color: #f28b82;
            --bg-color: #202124;
            --text-color: #e8eaed;
            --board-color: #303134;
            --cell-border: #5f6368;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            transition: all 0.3s ease;
        }

        h1 {
            color: var(--primary-color);
            margin-bottom: 10px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 600px;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .control-group {
            margin: 10px;
        }

        select, button {
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid var(--cell-border);
            background-color: var(--board-color);
            color: var(--text-color);
            cursor: pointer;
            transition: all 0.2s;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        button:active {
            transform: translateY(0);
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin: 20px 0;
            background-color: var(--board-color);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .cell {
            width: 80px;
            height: 80px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2.5rem;
            font-weight: bold;
            background-color: var(--board-color);
            border: 2px solid var(--cell-border);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .cell:hover {
            background-color: rgba(0,0,0,0.05);
            transform: scale(1.05);
        }

        .cell.x {
            color: var(--primary-color);
        }

        .cell.o {
            color: var(--secondary-color);
        }

        .cell.winner {
            animation: pulse 1s infinite;
            background-color: rgba(66, 133, 244, 0.1);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .scoreboard {
            display: flex;
            justify-content: space-around;
            width: 100%;
            margin: 20px 0;
            padding: 15px;
            background-color: var(--board-color);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .player-score {
            text-align: center;
            padding: 10px 20px;
            border-radius: 5px;
            transition: all 0.3s;
        }

        .player-score.active {
            background-color: rgba(66, 133, 244, 0.1);
            box-shadow: 0 0 0 2px var(--primary-color);
        }

        .player-score.x {
            color: var(--primary-color);
        }

        .player-score.o {
            color: var(--secondary-color);
        }

        .score-value {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .status {
            margin: 15px 0;
            font-size: 1.2rem;
            font-weight: bold;
            min-height: 24px;
            text-align: center;
        }

        .history {
            margin-top: 20px;
            width: 100%;
            max-height: 150px;
            overflow-y: auto;
            background-color: var(--board-color);
            border-radius: 8px;
            padding: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .history-item {
            padding: 8px;
            margin: 5px 0;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .history-item:hover {
            background-color: rgba(0,0,0,0.05);
        }

        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            background-color: var(--board-color);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background-color: #f00;
            border-radius: 50%;
            animation: fall 5s linear forwards;
        }

        @keyframes fall {
            to {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            .cell {
                width: 60px;
                height: 60px;
                font-size: 2rem;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="theme-toggle" title="Toggle theme">ðŸŒ“</div>
    <h1>Advanced Tic Tac Toe</h1>
    
    <div class="game-container">
        <div class="controls">
            <div class="control-group">
                <label for="game-mode">Game Mode:</label>
                <select id="game-mode">
                    <option value="pvp">Player vs Player</option>
                    <option value="pve">Player vs Computer</option>
                </select>
            </div>
            
            <div class="control-group">
                <label for="difficulty">Difficulty:</label>
                <select id="difficulty">
                    <option value="easy">Easy</option>
                    <option value="medium" selected>Medium</option>
                    <option value="hard">Hard</option>
                </select>
            </div>
            
            <div class="control-group">
                <label for="board-size">Board Size:</label>
                <select id="board-size">
                    <option value="3" selected>3x3</option>
                    <option value="4">4x4</option>
                    <option value="5">5x5</option>
                </select>
            </div>
            
            <div class="control-group">
                <button id="new-game">New Game</button>
                <button id="undo-move" disabled>Undo</button>
            </div>
        </div>
        
        <div class="scoreboard">
            <div class="player-score x active" id="player-x">
                <div>Player X</div>
                <div class="score-value">0</div>
            </div>
            <div class="player-score o" id="player-o">
                <div>Player O</div>
                <div class="score-value">0</div>
            </div>
        </div>
        
        <div class="status" id="status">Player X's turn</div>
        
        <div class="board" id="board"></div>
        
        <div class="history" id="history">
            <div>Game History</div>
        </div>
    </div>

    <audio id="click-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3" preload="auto"></audio>
    <audio id="win-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3" preload="auto"></audio>
    <audio id="draw-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-retro-arcade-game-over-470.mp3" preload="auto"></audio>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Game state
            let board = [];
            let currentPlayer = 'X';
            let gameActive = true;
            let moveHistory = [];
            let scores = { X: 0, O: 0 };
            let gameMode = 'pvp';
            let difficulty = 'medium';
            let boardSize = 3;
            
            // DOM elements
            const boardElement = document.getElementById('board');
            const statusElement = document.getElementById('status');
            const playerXElement = document.getElementById('player-x');
            const playerOElement = document.getElementById('player-o');
            const newGameButton = document.getElementById('new-game');
            const undoButton = document.getElementById('undo-move');
            const gameModeSelect = document.getElementById('game-mode');
            const difficultySelect = document.getElementById('difficulty');
            const boardSizeSelect = document.getElementById('board-size');
            const historyElement = document.getElementById('history');
            const themeToggle = document.querySelector('.theme-toggle');
            const clickSound = document.getElementById('click-sound');
            const winSound = document.getElementById('win-sound');
            const drawSound = document.getElementById('draw-sound');
            
            // Initialize the game
            initGame();
            
            // Event listeners
            newGameButton.addEventListener('click', initGame);
            undoButton.addEventListener('click', undoMove);
            gameModeSelect.addEventListener('change', (e) => {
                gameMode = e.target.value;
                initGame();
            });
            difficultySelect.addEventListener('change', (e) => {
                difficulty = e.target.value;
            });
            boardSizeSelect.addEventListener('change', (e) => {
                boardSize = parseInt(e.target.value);
                initGame();
            });
            themeToggle.addEventListener('click', toggleTheme);
            
            // Initialize the game board
            function initGame() {
                board = Array(boardSize * boardSize).fill(null);
                currentPlayer = 'X';
                gameActive = true;
                moveHistory = [];
                
                renderBoard();
                updateStatus();
                updateScoreDisplay();
                updateHistory();
                undoButton.disabled = true;
                
                playerXElement.classList.add('active');
                playerOElement.classList.remove('active');
            }
            
            // Render the game board
            function renderBoard() {
                boardElement.innerHTML = '';
                boardElement.style.gridTemplateColumns = `repeat(${boardSize}, 1fr)`;
                
                for (let i = 0; i < board.length; i++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.index = i;
                    
                    if (board[i]) {
                        cell.textContent = board[i];
                        cell.classList.add(board[i].toLowerCase());
                    }
                    
                    cell.addEventListener('click', () => handleCellClick(i));
                    boardElement.appendChild(cell);
                }
            }
            
            // Handle cell click
            function handleCellClick(index) {
                if (!gameActive || board[index] !== null) return;
                
                // Play click sound
                if (clickSound) {
                    clickSound.currentTime = 0;
                    clickSound.play();
                }
                
                // Make the move
                makeMove(index);
                
                // If it's PvE and the game is still active, make computer move
                if (gameActive && gameMode === 'pve' && currentPlayer === 'O') {
                    setTimeout(() => {
                        const computerMove = getComputerMove();
                        if (computerMove !== null) {
                            makeMove(computerMove);
                        }
                    }, 500);
                }
            }
            
            // Make a move on the board
            function makeMove(index) {
                board[index] = currentPlayer;
                moveHistory.push({ index, player: currentPlayer, board: [...board] });
                
                renderBoard();
                checkGameResult();
                
                if (gameActive) {
                    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                    updateStatus();
                    updateActivePlayer();
                }
                
                undoButton.disabled = moveHistory.length === 0;
                updateHistory();
            }
            
            // Undo the last move
            function undoMove() {
                if (moveHistory.length === 0) return;
                
                const lastMove = moveHistory.pop();
                board = [...lastMove.board];
                board[lastMove.index] = null;
                
                // If we're in PvE mode and it's computer's turn, remove the computer's move too
                if (gameMode === 'pve' && currentPlayer === 'X' && moveHistory.length > 0) {
                    const computerMove = moveHistory.pop();
                    board = [...computerMove.board];
                    board[computerMove.index] = null;
                }
                
                gameActive = true;
                renderBoard();
                updateStatus();
                updateActivePlayer();
                undoButton.disabled = moveHistory.length === 0;
                updateHistory();
            }
            
            // Get computer's move based on difficulty
            function getComputerMove() {
                const emptyCells = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);
                
                if (emptyCells.length === 0) return null;
                
                // Easy mode - random move
                if (difficulty === 'easy') {
                    return emptyCells[Math.floor(Math.random() * emptyCells.length)];
                }
                
                // Medium mode - sometimes blocks or wins, sometimes random
                if (difficulty === 'medium') {
                    // Check for winning move
                    for (const index of emptyCells) {
                        const newBoard = [...board];
                        newBoard[index] = 'O';
                        if (checkWinner(newBoard) === 'O') {
                            return index;
                        }
                    }
                    
                    // Check for blocking move
                    for (const index of emptyCells) {
                        const newBoard = [...board];
                        newBoard[index] = 'X';
                        if (checkWinner(newBoard) === 'X') {
                            return index;
                        }
                    }
                    
                    // 50% chance to make a random move, 50% to make a strategic move
                    if (Math.random() < 0.5) {
                        return emptyCells[Math.floor(Math.random() * emptyCells.length)];
                    }
                }
                
                // Hard mode - minimax algorithm
                if (difficulty === 'hard') {
                    return findBestMove();
                }
                
                // Default to random if none of the above
                return emptyCells[Math.floor(Math.random() * emptyCells.length)];
            }
            
            // Minimax algorithm for hard difficulty
            function findBestMove() {
                let bestScore = -Infinity;
                let bestMove = null;
                const emptyCells = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);
                
                for (const index of emptyCells) {
                    const newBoard = [...board];
                    newBoard[index] = 'O';
                    const score = minimax(newBoard, 0, false);
                    
                    if (score > bestScore) {
                        bestScore = score;
                        bestMove = index;
                    }
                }
                
                return bestMove;
            }
            
            function minimax(board, depth, isMaximizing) {
                const result = checkWinner(board);
                
                if (result === 'O') return 10 - depth;
                if (result === 'X') return depth - 10;
                if (result === 'draw') return 0;
                
                const emptyCells = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);
                
                if (isMaximizing) {
                    let bestScore = -Infinity;
                    for (const index of emptyCells) {
                        const newBoard = [...board];
                        newBoard[index] = 'O';
                        const score = minimax(newBoard, depth + 1, false);
                        bestScore = Math.max(score, bestScore);
                    }
                    return bestScore;
                } else {
                    let bestScore = Infinity;
                    for (const index of emptyCells) {
                        const newBoard = [...board];
                        newBoard[index] = 'X';
                        const score = minimax(newBoard, depth + 1, true);
                        bestScore = Math.min(score, bestScore);
                    }
                    return bestScore;
                }
            }
            
            // Check game result (win/draw)
            function checkGameResult() {
                const winner = checkWinner(board);
                
                if (winner) {
                    gameActive = false;
                    
                    if (winner !== 'draw') {
                        scores[winner]++;
                        updateScoreDisplay();
                        highlightWinningCells();
                        
                        if (winSound) {
                            winSound.currentTime = 0;
                            winSound.play();
                        }
                        
                        createConfetti();
                        statusElement.textContent = `Player ${winner} wins!`;
                    } else {
                        if (drawSound) {
                            drawSound.currentTime = 0;
                            drawSound.play();
                        }
                        statusElement.textContent = "It's a draw!";
                    }
                }
            }
            
            // Check if there's a winner
            function checkWinner(board) {
                // Check rows
                for (let i = 0; i < boardSize; i++) {
                    const rowStart = i * boardSize;
                    const firstCell = board[rowStart];
                    if (firstCell && board.slice(rowStart, rowStart + boardSize).every(cell => cell === firstCell)) {
                        return firstCell;
                    }
                }
                
                // Check columns
                for (let i = 0; i < boardSize; i++) {
                    const firstCell = board[i];
                    if (firstCell) {
                        let allSame = true;
                        for (let j = i; j < board.length; j += boardSize) {
                            if (board[j] !== firstCell) {
                                allSame = false;
                                break;
                            }
                        }
                        if (allSame) return firstCell;
                    }
                }
                
                // Check diagonals
                // Top-left to bottom-right
                const topLeft = board[0];
                if (topLeft) {
                    let allSame = true;
                    for (let i = 0; i < boardSize; i++) {
                        if (board[i * boardSize + i] !== topLeft) {
                            allSame = false;
                            break;
                        }
                    }
                    if (allSame) return topLeft;
                }
                
                // Top-right to bottom-left
                const topRight = board[boardSize - 1];
                if (topRight) {
                    let allSame = true;
                    for (let i = 0; i < boardSize; i++) {
                        if (board[i * boardSize + (boardSize - 1 - i)] !== topRight) {
                            allSame = false;
                            break;
                        }
                    }
                    if (allSame) return topRight;
                }
                
                // Check for draw
                if (!board.includes(null)) {
                    return 'draw';
                }
                
                return null;
            }
            
            // Highlight winning cells
            function highlightWinningCells() {
                // This is a simplified version - in a full implementation, 
                // you would determine which cells actually formed the winning line
                const winner = checkWinner(board);
                if (winner && winner !== 'draw') {
                    const cells = document.querySelectorAll('.cell');
                    cells.forEach(cell => {
                        if (cell.textContent === winner) {
                            cell.classList.add('winner');
                        }
                    });
                }
            }
            
            // Update game status
            function updateStatus() {
                if (gameActive) {
                    if (gameMode === 'pve' && currentPlayer === 'O') {
                        statusElement.textContent = "Computer's turn (O)";
                    } else {
                        statusElement.textContent = `Player ${currentPlayer}'s turn`;
                    }
                }
            }
            
            // Update active player display
            function updateActivePlayer() {
                if (currentPlayer === 'X') {
                    playerXElement.classList.add('active');
                    playerOElement.classList.remove('active');
                } else {
                    playerXElement.classList.remove('active');
                    playerOElement.classList.add('active');
                }
            }
            
            // Update score display
            function updateScoreDisplay() {
                document.querySelector('#player-x .score-value').textContent = scores.X;
                document.querySelector('#player-o .score-value').textContent = scores.O;
            }
            
            // Update move history
            function updateHistory() {
                historyElement.innerHTML = '<div>Game History</div>';
                
                moveHistory.forEach((move, index) => {
                    const historyItem = document.createElement('div');
                    historyItem.classList.add('history-item');
                    historyItem.textContent = `Move ${index + 1}: Player ${move.player} to position ${Math.floor(move.index / boardSize) + 1},${(move.index % boardSize) + 1}`;
                    
                    historyItem.addEventListener('click', () => {
                        // Revert to this state
                        board = [...move.board];
                        moveHistory = moveHistory.slice(0, index + 1);
                        currentPlayer = moveHistory.length % 2 === 0 ? 'X' : 'O';
                        gameActive = checkWinner(board) === null;
                        
                        renderBoard();
                        updateStatus();
                        updateActivePlayer();
                        undoButton.disabled = moveHistory.length === 0;
                        updateHistory();
                    });
                    
                    historyElement.appendChild(historyItem);
                });
                
                historyElement.scrollTop = historyElement.scrollHeight;
            }
            
            // Create confetti effect
            function createConfetti() {
                const colors = ['#4285f4', '#ea4335', '#fbbc05', '#34a853', '#8ab4f8', '#f28b82'];
                
                for (let i = 0; i < 100; i++) {
                    const confetti = document.createElement('div');
                    confetti.classList.add('confetti');
                    confetti.style.left = `${Math.random() * 100}vw`;
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.width = `${Math.random() * 10 + 5}px`;
                    confetti.style.height = `${Math.random() * 10 + 5}px`;
                    confetti.style.animationDuration = `${Math.random() * 3 + 2}s`;
                    
                    document.body.appendChild(confetti);
                    
                    setTimeout(() => {
                        confetti.remove();
                    }, 5000);
                }
            }
            
            // Toggle dark/light theme
            function toggleTheme() {
                document.body.classList.toggle('dark-theme');
                const isDark = document.body.classList.contains('dark-theme');
                themeToggle.textContent = isDark ? 'ðŸŒž' : 'ðŸŒ“';
            }
        });
    </script>
</body>
</html>